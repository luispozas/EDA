Cases:
------
Tournament: Given a vector of teams, scheduling of possible matches.


1,2,3,4,5,6,7,8

0     1     2     3     4     5     6     7 
+-----+-----+-----+-----+-----+-----+-----+
| 1,2 | 1,3 | 1,4 | 1,5 | 1,6 | 1,7 | 1,8 |
+-----+-----+-----+-----+-----+-----+-----+
| 3,4 | 2,4 | 2,3 | 2,6 | 2,7 | 2,8 | 2,5 |
+-----+-----+-----+-----+-----+-----+-----+
| 5,6 | 5,7 | 5,8 | 3,7 | 3,8 | 3,5 | 3,6 |
+-----+-----+-----+-----+-----+-----+-----+
| 7,8 | 6,8 | 6,7 | 4,8 | 4,5 | 4,6 | 4,7 |
+-----+-----+-----+-----+-----+-----+-----+



  Input Data:
      [int], N>=1 
  Ouput Data:
      [(int,int)] , length M
      
      where

      M : n(n-1)/2  (number of matches)
      MpD : n%2=0 -> n/2
            n%2!=0 -> (n-1)/2 (matches per day)
      D   : n%2=0 -> n-1
            n%2!=0 -> n       (days)
      A[0..M)       (matches on tournament)



P : len(l)>= 1
fun itournament (l) dev r:[(int,int)]
   case (len(l)==1)
       dev []
   case (len(l)==2)
      [(l[0],l[1])]
   case (N>2)
      let
        h=N/2
      in
       l1 <- itournament (take l,h)
       l2 <- itournament (drop l, len-h)
       l=l1+l2
       for j 0 to len(l2)
          for i 0 to len(l1)
            l=l +(l1[i], l2[h+((i+j)%(len-h))])

(Algun dibujo representativo del segundo bucle)


- Principales ideas:
   - V[0..M) of (int,int)
   - Base N=1, (ningun encuentro, vector vacia) 
   - Base N=2, (V[0],V[1])
   - Recursivo N > 2
       Hipotesis: Resuelto para A1[0..N/2) y A2[N/2..N)
       Combinar cada posible elemento de A1,
                con cada posible elemento de A2, pero
		"guardando dias consecutivos"

- Coste: A=2 , B=2 , k = 2  . A<B^k,

     primer caso, T(n) in O(n^k)=O(n^2)
