Problemas de Back Tracking:
---------------------------

_Sistem치ticamente_ debo responder las siguientes preguntas:


 1. Como planteo la soluci칩n en un vector [0..N)  sol
 2. Condiciones explicitas .   for
 3. Condiciones implicitas .   isvalid
       3.1 Marcaje             m
 4. Cuando es solucion.        esSolucion
 5. Iniciar valores.           main


Palabras:
---------
  Dado un alfabeto \Sigma={a,b,c,d,...,z} |\Sigma|=26

  Generar todas las posibles palabras de longitud N<=|\Sigma|
  sin repetir letras.
  
          abcde
	  abcdf
          abced
	  abcef
Con N=5	  abcfd
	  abcfe
	  abdce
	  abdcf
          .....


 1. Como planteo la soluci칩n en un vector 
 
    sol[]

 2. Condiciones explicitas .   for

    sol[i] \in \Sigma

 3. Condiciones implicitas .   isvalid

    "No letras repetidas"...
    (Formalmente)
    
       \forall i : 0 <= i < N : frec(V[i],V,N)=1

       3.1 Marcaje             m

       Matriz de elementos m[0..\Sigma] de booleanos.

  4. Cuando es solucion
          k=|\Sigma|-1



Dominio.
-------

De cuantas maneras puedo articular un partida de domino.

   (6,6) -> (6,3) -> (3,4) -> (4,1) -> (1,0) ->..... ->  (5,6)



 1. Como planteo la soluci칩n en un vector [0..N).

(Idea: representar descartando redundancia

   (6,6) -> (6,3) -> (3,4) -> (4,1) -> (1,0) ->..... ->  (5,6)
 .     	\  	 \  	  \  	   \   	    \  	      \	      \
  \    	 \     	  \    	   \   	    \  	     . 	       \       \
0  \      \    	   \   	    \  	     \ 	      .	       	\      	.
+--------+--------+--------+--------+--------+--....--+--------+
|    6   |   6    |    3   |   4    |    1   |        |   5    |
+--------+--------+--------+--------+--------+--....--+--------+


 2.- Condiciones explicitas para V[M]... val \in [0..6]

 3.- Condiciones implicitas para V[M]

      "que no se repitan las fichas"

 \forall i : 0 <= i < i+1 < k : !(sol[i]=sol[k-1] && sol[i+1]=sol[k])

      Como es O(n), invertimos en memoria con el siguiente marcaje.

        m[6+1][6+1]  m[0..6]x m[0..6] of bool


 4.- Cuando acabo?   Dificil!
 
       Para 7 x 4 = 28 fichas (como pares) corresponden 29

       En general, para N fichas, tenemos

       M= (NxN + N)/2 + 1


 5. Iniciar valores.           main

  Con M=7

  for (int m=0; m<M ; m++) // O(n^2)
    for (int n=0; n<M ; n++)
      marks[m][n]=false;
  sol[0]=M-1;
  sol[1]=M-1;
  marks[M-1][M-1]=true;
  stop = false;
  domino(sol,2,marks,stop); <== An eye, 2!


(Codigo C disponible en el campus/Juez)
